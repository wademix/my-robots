{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/robots.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","username","Scroll","props","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","_this$state","filteredRobots","filter","robot","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.920a66df.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n\treturn (\r\n \t  <div className='tc bg-light-yellow dib br4 pa3 ma2 grow bw2 shadow-5'>\r\n \t  \t<img alt='robots' src={`https://robohash.org/${id}?100x100`} />\r\n \t  \t<div>\r\n \t  \t   <h2>{name}</h2>\r\n \t  \t   <p>{email}</p>\r\n \t  \t</div>   \t\r\n \t  </div>\r\n\t);\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\trobots.map((user, i) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Card \r\n\t\t\t\t\t\t\tkey={i} \r\n\t\t\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\t\t\tname={robots[i].name} \r\n\t\t\t\t\t\t\temail={robots[i].email}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t\t})\t\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input className='pa3 ba b--yellow bg--yellow'\r\n\t\t\t\ttype='search' \r\n\t\t\t\tplaceholder='search robots' \r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\t\r\n\t);\r\n}\r\nexport default SearchBox; ","export const robots = [\r\n\t{\r\n\t\tid: 1,\r\n\t\tname: 'Ik ThankGod',\r\n\t\tusername: 'Richboy',\r\n\t\temail: 'Richboy@new.co'\r\n\t},\r\n\t{\r\n\t\tid: 2,\r\n\t\tname: 'Igwe Favour',\r\n\t\tusername: 'Yumpkin',\r\n\t\temail: 'Daddysgirl@new.co'\r\n\t},\r\n\t{\r\n\t\tid: 3,\r\n\t\tname: 'Udih Ovie',\r\n\t\tusername: 'Touchlight',\r\n\t\temail: 'Rapking@new.co'\r\n\t},\r\n\t{\r\n\t\tid: 4,\r\n\t\tname: 'Micheal Imara',\r\n\t\tusername: 'Mimara',\r\n\t\temail: 'Mimaraconcept@new.co'\r\n\t},\r\n\t{\r\n\t\tid: 5,\r\n\t\tname: 'Samuel Ehuwa',\r\n\t\tusername: 'Skart',\r\n\t\temail: 'Singer@new.co'\r\n\t},\r\n\t{\r\n\t\tid: 6,\r\n\t\tname: 'Ufouma Pokoh',\r\n\t\tusername: 'Magic',\r\n\t\temail: 'fingers@new.co'\r\n\t},\r\n\t{\r\n\t\tid: 7,\r\n\t\tname: 'Bassey Precious',\r\n\t\tusername: 'Pee-Drums',\r\n\t\temail: 'drummerboy@new.co'\r\n\t},\r\n\t{\r\n\t\tid: 8,\r\n\t\tname: 'Wajey Gee',\r\n\t\tusername: 'Yellow',\r\n\t\temail: 'pawpaw@new.co'\r\n\t},\r\n\t{\r\n\t\tid: 9,\r\n\t\tname: 'Wade Courage',\r\n\t\tusername: 'South',\r\n\t\temail: 'south@new.com'\r\n\t},\r\n\t{\r\n\t\tid: 10,\r\n\t\tname: 'Ozedikus Nwanne',\r\n\t\tusername: 'Nwanne',\r\n\t\temail: 'gunnerato@new.com'\r\n\t}\r\n];","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{ overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\nexport default Scroll;","import React, { Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport { robots } from '../components/robots';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobots: robots,\r\n\t\t\t// robots: [],\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n\t}\r\n\r\n\t// componentDidMount() {\r\n\t// \tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t// \t.then(responses => response.json())\r\n\t// \t.then(users => {this.setState({ robots: users})});\r\n\t// }\r\n\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({ searchfield: event.target.value })\r\n\t\t\r\n\t}\r\n\trender() {\r\n\t\tconst { robots, searchfield } = this.state;\r\n\t\tconst filteredRobots = robots.filter(robot =>{\r\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t\t})\r\n\t\tif (robots.length === 0) {\r\n\t\t\treturn<h1>Loading</h1>\r\n\t\t} else {\r\n\t\t\treturn (\r\n\t\t\t<div className='tc'>\r\n\t\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<CardList robots={filteredRobots}/> \r\n\t\t\t\t</Scroll>\t\r\n\t\t\t</div>\r\n\t\t );\r\n\t\t}\r\n\t\t \t\r\n\t}\r\n\t\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}